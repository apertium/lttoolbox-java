Here is a diff that makes the runtime om LTToolbox-java JDK 1.5 compatible (requirement for Android 2.2).

However, all the generated transfer files uses the String.isEmpty() method, which is JDK 1.6, so they'd
need to be regenerated, which is not a problem but will require some tedious work, so I'll leave this diff
for now.

Jacob, 13 nov 2012



Index: src/org/apertium/transfer/MatchState.java
===================================================================
--- src/org/apertium/transfer/MatchState.java	(revision 41560)
+++ src/org/apertium/transfer/MatchState.java	(working copy)
@@ -139,7 +139,8 @@
 
   @Override
   public String toString() {
-    return "ms["+first +";"+last+"]=" + Arrays.toString(Arrays.copyOfRange(state, first, last));
+    //Not JDK 1.5 compliant: return "ms["+first +";"+last+"]=" + Arrays.toString(Arrays.copyOfRange(state, first, last));
+    return "ms["+first +";"+last+"]=" + Arrays.asList(state).subList(first, last);
   }
 
   private void applySymbol(int[] node, int symbol) {
Index: src/org/apertium/lttoolbox/LTProc.java
===================================================================
--- src/org/apertium/lttoolbox/LTProc.java	(revision 41563)
+++ src/org/apertium/lttoolbox/LTProc.java	(working copy)
@@ -296,7 +296,7 @@
             if (fstp.getNullFlush()) {
                 output.append('\0');
             }
-            throw new IOException(e); // Send to parent
+            throw new RuntimeException(e); // Send to parent
         }
 
 
Index: src/org/apertium/lttoolbox/process/FSTProcessor.java
===================================================================
--- src/org/apertium/lttoolbox/process/FSTProcessor.java	(revision 41560)
+++ src/org/apertium/lttoolbox/process/FSTProcessor.java	(working copy)
@@ -60,9 +60,6 @@
 import java.io.*;
 import org.apertium.lttoolbox.*;
 import java.nio.ByteBuffer;
-import java.nio.MappedByteBuffer;
-import java.nio.channels.FileChannel;
-import java.util.ArrayDeque;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
@@ -70,6 +67,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.LinkedList;
 import java.util.List;
 import org.apertium.utils.IOUtils;
 
@@ -163,7 +161,7 @@
   /**
    Queue of blanks, used in reading methods
    */
-  private ArrayDeque<String> blankqueue = new ArrayDeque<String>();
+  private LinkedList<String> blankqueue = new LinkedList<String>();
   /**
    Set of characters being considered alphabetics in wound-example.dix file this corresponds to
    <alphabet>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</alphabet>
@@ -1657,7 +1655,7 @@
       if (iswpunct(val) || Alphabet.isSpaceChar(val)) {
         boolean firstupper = false;
         boolean uppercase = false;
-        if (!sf.isEmpty()) {
+        if (sf.length()>0) {
           firstupper = Alphabet.isUpperCase(sf.charAt(1));
           uppercase = sf.length() > 1 && firstupper && Alphabet.isUpperCase(sf.charAt(2));
         }
@@ -2066,7 +2064,7 @@
       }
 
       if (current_state.size() == 0) {
-        if (!symbol.isEmpty() && !(result.length() == 0)) {
+        if (symbol.length()>0 && !(result.length() == 0)) {
           queue.append(symbol);
         } else {
           // word is not present
Index: src/org/apertium/lttoolbox/process/State.java
===================================================================
--- src/org/apertium/lttoolbox/process/State.java	(revision 41550)
+++ src/org/apertium/lttoolbox/process/State.java	(working copy)
@@ -17,11 +17,11 @@
  * 02111-1307, USA.
  */
 import org.apertium.lttoolbox.Alphabet;
-import java.util.ArrayDeque;
 import java.util.List;
 import java.util.Set;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.LinkedList;
 import org.apertium.lttoolbox.process.Node.Transition;
 
 /**
@@ -652,7 +652,7 @@
    @param firstchar first character of the word
    @return the result of the transduction
    */
-  String filterFinalsTM(Alphabet alphabet, SetOfCharacters escaped_chars, ArrayDeque<String> blankqueue, ArrayList<String> numbers) {
+  String filterFinalsTM(Alphabet alphabet, SetOfCharacters escaped_chars, LinkedList<String> blankqueue, ArrayList<String> numbers) {
     String result = "";
     for (int i = 0, limit = state.size(); i < limit; i++) {
       TNodeState state_i = state.get(i);
Index: src/org/apertium/CommandLineInterface.java
===================================================================
--- src/org/apertium/CommandLineInterface.java	(revision 41550)
+++ src/org/apertium/CommandLineInterface.java	(working copy)
@@ -72,7 +72,8 @@
       // strip evt path
       String task = new File(argv[0]).getName().trim();
 
-      String[] restOfArgs = Arrays.copyOfRange(argv, 1 , argv.length);
+      String[] restOfArgs = new String[argv.length-1]; //Not used for JDK 1.5 compatibility: Arrays.copyOfRange(argv, 1 , argv.length);
+      System.arraycopy(argv, 1, restOfArgs, 0, argv.length-1);
       if (task.startsWith("lt-proc")) LTProc.main(restOfArgs);
       else if (task.equals("apertium") || task.equals("apertium-j")) ApertiumMain.main(restOfArgs);
       else if (task.startsWith("apertium-transfer")) ApertiumTransfer.main(restOfArgs);
